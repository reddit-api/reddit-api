use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Generated by https://quicktype.io

#[derive(Serialize, Deserialize)]
pub struct SubRedditNew {
    pub kind: String,
    pub data: SubRedditNewData,
}

#[derive(Serialize, Deserialize)]
pub struct SubRedditNewData {
    pub after: String,
    pub dist: i64,
    pub modhash: String,
    pub geo_filter: String,
    pub children: Vec<Child>,
    pub before: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize)]
pub struct Child {
    pub kind: Kind,
    pub data: ChildData,
}

#[derive(Serialize, Deserialize)]
pub struct ChildData {
    pub approved_at_utc: Option<serde_json::Value>,
    pub subreddit: String,
    pub selftext: String,
    pub author_fullname: String,
    pub saved: bool,
    pub mod_reason_title: Option<serde_json::Value>,
    pub gilded: i64,
    pub clicked: bool,
    pub title: String,
    pub link_flair_richtext: Vec<FlairRichtext>,
    pub subreddit_name_prefixed: String,
    pub hidden: bool,
    pub pwls: Option<i64>,
    pub link_flair_css_class: Option<String>,
    pub downs: i64,
    pub thumbnail_height: Option<i64>,
    pub top_awarded_type: Option<serde_json::Value>,
    pub hide_score: bool,
    pub name: String,
    pub quarantine: bool,
    pub link_flair_text_color: LinkFlairTextColor,
    pub upvote_ratio: f64,
    pub author_flair_background_color: Option<String>,
    pub ups: i64,
    pub total_awards_received: i64,
    pub media_embed: MediaEmbed,
    pub thumbnail_width: Option<i64>,
    pub author_flair_template_id: Option<String>,
    pub is_original_content: bool,
    pub user_reports: Vec<Option<serde_json::Value>>,
    pub secure_media: Option<Media>,
    pub is_reddit_media_domain: bool,
    pub is_meta: bool,
    pub category: Option<serde_json::Value>,
    pub secure_media_embed: MediaEmbed,
    pub link_flair_text: Option<String>,
    pub can_mod_post: bool,
    pub score: i64,
    pub approved_by: Option<serde_json::Value>,
    pub is_created_from_ads_ui: bool,
    pub author_premium: bool,
    pub thumbnail: String,
    pub edited: Edited,
    pub author_flair_css_class: Option<serde_json::Value>,
    pub author_flair_richtext: Vec<FlairRichtext>,
    pub gildings: Gildings,
    pub post_hint: Option<PostHint>,
    pub content_categories: Option<serde_json::Value>,
    pub is_self: bool,
    pub subreddit_type: SubredditType,
    pub created: f64,
    pub link_flair_type: AuthorFlairType,
    pub wls: Option<i64>,
    pub removed_by_category: Option<serde_json::Value>,
    pub banned_by: Option<serde_json::Value>,
    pub author_flair_type: AuthorFlairType,
    pub domain: String,
    pub allow_live_comments: bool,
    pub selftext_html: Option<String>,
    pub likes: Option<serde_json::Value>,
    pub suggested_sort: Option<SuggestedSort>,
    pub banned_at_utc: Option<serde_json::Value>,
    pub url_overridden_by_dest: Option<String>,
    pub view_count: Option<serde_json::Value>,
    pub archived: bool,
    pub no_follow: bool,
    pub is_crosspostable: bool,
    pub pinned: bool,
    pub over_18: bool,
    pub preview: Option<Preview>,
    pub all_awardings: Vec<AllAwarding>,
    pub awarders: Vec<Option<serde_json::Value>>,
    pub media_only: bool,
    pub link_flair_template_id: Option<String>,
    pub can_gild: bool,
    pub spoiler: bool,
    pub locked: bool,
    pub author_flair_text: Option<String>,
    pub treatment_tags: Vec<Option<serde_json::Value>>,
    pub visited: bool,
    pub removed_by: Option<serde_json::Value>,
    pub mod_note: Option<serde_json::Value>,
    pub distinguished: Option<Distinguished>,
    pub subreddit_id: String,
    pub author_is_blocked: bool,
    pub mod_reason_by: Option<serde_json::Value>,
    pub num_reports: Option<serde_json::Value>,
    pub removal_reason: Option<serde_json::Value>,
    pub link_flair_background_color: String,
    pub id: String,
    pub is_robot_indexable: bool,
    pub report_reasons: Option<serde_json::Value>,
    pub author: String,
    pub discussion_type: Option<serde_json::Value>,
    pub num_comments: i64,
    pub send_replies: bool,
    pub whitelist_status: Option<WhitelistStatus>,
    pub contest_mode: bool,
    pub mod_reports: Vec<Option<serde_json::Value>>,
    pub author_patreon_flair: bool,
    pub author_flair_text_color: Option<String>,
    pub permalink: String,
    pub parent_whitelist_status: Option<WhitelistStatus>,
    pub stickied: bool,
    pub url: String,
    pub subreddit_subscribers: i64,
    pub created_utc: f64,
    pub num_crossposts: i64,
    pub media: Option<Media>,
    pub is_video: bool,
    pub media_metadata: Option<HashMap<String, MediaMetadatum>>,
    pub is_gallery: Option<bool>,
    pub gallery_data: Option<GalleryData>,
}

#[derive(Serialize, Deserialize)]
pub struct AllAwarding {
    pub giver_coin_reward: Option<i64>,
    pub subreddit_id: Option<serde_json::Value>,
    pub is_new: bool,
    pub days_of_drip_extension: i64,
    pub coin_price: i64,
    pub id: String,
    pub penny_donate: Option<i64>,
    pub award_sub_type: AwardSubType,
    pub coin_reward: i64,
    pub icon_url: String,
    pub days_of_premium: i64,
    pub tiers_by_required_awardings: Option<serde_json::Value>,
    pub resized_icons: Vec<ResizedIcon>,
    pub icon_width: i64,
    pub static_icon_width: i64,
    pub start_date: Option<serde_json::Value>,
    pub is_enabled: bool,
    pub awardings_required_to_grant_benefits: Option<serde_json::Value>,
    pub description: String,
    pub end_date: Option<serde_json::Value>,
    pub subreddit_coin_reward: i64,
    pub count: i64,
    pub static_icon_height: i64,
    pub name: String,
    pub resized_static_icons: Vec<ResizedIcon>,
    pub icon_format: Option<String>,
    pub icon_height: i64,
    pub penny_price: Option<i64>,
    pub award_type: AwardType,
    pub static_icon_url: String,
}

#[derive(Serialize, Deserialize)]
pub struct ResizedIcon {
    pub url: String,
    pub width: i64,
    pub height: i64,
}

#[derive(Serialize, Deserialize)]
pub struct FlairRichtext {
    pub e: AuthorFlairType,
    pub t: String,
}

#[derive(Serialize, Deserialize)]
pub struct GalleryData {
    pub items: Vec<Item>,
}

#[derive(Serialize, Deserialize)]
pub struct Item {
    pub media_id: String,
    pub id: i64,
}

#[derive(Serialize, Deserialize)]
pub struct Gildings {
    pub gid_1: Option<i64>,
}

#[derive(Serialize, Deserialize)]
pub struct Media {
    pub reddit_video: Option<RedditVideo>,
    #[serde(rename = "type")]
    pub media_type: Option<String>,
    pub oembed: Option<Oembed>,
}

#[derive(Serialize, Deserialize)]
pub struct Oembed {
    pub provider_url: String,
    pub version: String,
    pub title: String,
    #[serde(rename = "type")]
    pub oembed_type: String,
    pub thumbnail_width: i64,
    pub height: i64,
    pub width: i64,
    pub html: String,
    pub author_name: Option<String>,
    pub provider_name: String,
    pub thumbnail_url: String,
    pub thumbnail_height: i64,
    pub author_url: Option<String>,
    pub description: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct RedditVideo {
    pub bitrate_kbps: i64,
    pub fallback_url: String,
    pub height: i64,
    pub width: i64,
    pub scrubber_media_url: String,
    pub dash_url: String,
    pub duration: i64,
    pub hls_url: String,
    pub is_gif: bool,
    pub transcoding_status: String,
}

#[derive(Serialize, Deserialize)]
pub struct MediaEmbed {
    pub content: Option<String>,
    pub width: Option<i64>,
    pub scrolling: Option<bool>,
    pub height: Option<i64>,
    pub media_domain_url: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct MediaMetadatum {
    pub status: Status,
    pub e: String,
    pub m: String,
    pub p: Vec<String>,
    pub s: String,
    pub id: String,
}

#[derive(Serialize, Deserialize)]
pub struct S {
    pub y: i64,
    pub x: i64,
    pub u: String,
}

#[derive(Serialize, Deserialize)]
pub struct Preview {
    pub images: Vec<Image>,
    pub enabled: bool,
}

#[derive(Serialize, Deserialize)]
pub struct Image {
    pub source: ResizedIcon,
    pub resolutions: Vec<ResizedIcon>,
    pub variants: Variants,
    pub id: String,
}

#[derive(Serialize, Deserialize)]
pub struct Variants {
    pub gif: Option<Gif>,
    pub mp4: Option<Gif>,
}

#[derive(Serialize, Deserialize)]
pub struct Gif {
    pub source: ResizedIcon,
    pub resolutions: Vec<ResizedIcon>,
}

#[derive(Serialize, Deserialize)]
#[serde(untagged)]
pub enum Edited {
    Bool(bool),

    Double(f64),
}

#[derive(Serialize, Deserialize)]
pub enum AwardSubType {
    #[serde(rename = "GLOBAL")]
    Global,

    #[serde(rename = "PREMIUM")]
    Premium,
}

#[derive(Serialize, Deserialize)]
pub enum AwardType {
    #[serde(rename = "global")]
    Global,
}

#[derive(Serialize, Deserialize)]
pub enum AuthorFlairType {
    #[serde(rename = "richtext")]
    Richtext,

    #[serde(rename = "text")]
    Text,
}

#[derive(Serialize, Deserialize)]
pub enum Distinguished {
    #[serde(rename = "moderator")]
    Moderator,
}

#[derive(Serialize, Deserialize)]
pub enum LinkFlairTextColor {
    #[serde(rename = "dark")]
    Dark,

    #[serde(rename = "light")]
    Light,
}

#[derive(Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "valid")]
    Valid,
}

#[derive(Serialize, Deserialize)]
pub enum WhitelistStatus {
    #[serde(rename = "all_ads")]
    AllAds,

    #[serde(rename = "some_ads")]
    SomeAds,
}

#[derive(Serialize, Deserialize)]
pub enum PostHint {
    #[serde(rename = "hosted:video")]
    HostedVideo,

    #[serde(rename = "image")]
    Image,

    #[serde(rename = "link")]
    Link,

    #[serde(rename = "self")]
    PostHintSelf,
}

#[derive(Serialize, Deserialize)]
pub enum SubredditType {
    #[serde(rename = "public")]
    Public,

    #[serde(rename = "restricted")]
    Restricted,
}

#[derive(Serialize, Deserialize)]
pub enum SuggestedSort {
    #[serde(rename = "confidence")]
    Confidence,
}

#[derive(Serialize, Deserialize)]
pub enum Kind {
    #[serde(rename = "t3")]
    T3,
}
