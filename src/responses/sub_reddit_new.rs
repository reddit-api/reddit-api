use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Generated by https://quicktype.io

#[derive(Serialize, Deserialize)]
pub struct SubRedditNew {
    #[serde(rename = "kind")]
    pub kind: String,

    #[serde(rename = "data")]
    pub data: SubRedditNewData,
}

#[derive(Serialize, Deserialize)]
pub struct SubRedditNewData {
    #[serde(rename = "after")]
    pub after: String,

    #[serde(rename = "dist")]
    pub dist: i64,

    #[serde(rename = "modhash")]
    pub modhash: String,

    #[serde(rename = "geo_filter")]
    pub geo_filter: String,

    #[serde(rename = "children")]
    pub children: Vec<Child>,

    #[serde(rename = "before")]
    pub before: Option<serde_json::Value>,
}

#[derive(Serialize, Deserialize)]
pub struct Child {
    #[serde(rename = "kind")]
    pub kind: Kind,

    #[serde(rename = "data")]
    pub data: ChildData,
}

#[derive(Serialize, Deserialize)]
pub struct ChildData {
    #[serde(rename = "approved_at_utc")]
    pub approved_at_utc: Option<serde_json::Value>,

    #[serde(rename = "subreddit")]
    pub subreddit: String,

    #[serde(rename = "selftext")]
    pub selftext: String,

    #[serde(rename = "author_fullname")]
    pub author_fullname: String,

    #[serde(rename = "saved")]
    pub saved: bool,

    #[serde(rename = "mod_reason_title")]
    pub mod_reason_title: Option<serde_json::Value>,

    #[serde(rename = "gilded")]
    pub gilded: i64,

    #[serde(rename = "clicked")]
    pub clicked: bool,

    #[serde(rename = "title")]
    pub title: String,

    #[serde(rename = "link_flair_richtext")]
    pub link_flair_richtext: Vec<FlairRichtext>,

    #[serde(rename = "subreddit_name_prefixed")]
    pub subreddit_name_prefixed: String,

    #[serde(rename = "hidden")]
    pub hidden: bool,

    #[serde(rename = "pwls")]
    pub pwls: Option<i64>,

    #[serde(rename = "link_flair_css_class")]
    pub link_flair_css_class: Option<String>,

    #[serde(rename = "downs")]
    pub downs: i64,

    #[serde(rename = "thumbnail_height")]
    pub thumbnail_height: Option<i64>,

    #[serde(rename = "top_awarded_type")]
    pub top_awarded_type: Option<serde_json::Value>,

    #[serde(rename = "hide_score")]
    pub hide_score: bool,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "quarantine")]
    pub quarantine: bool,

    #[serde(rename = "link_flair_text_color")]
    pub link_flair_text_color: LinkFlairTextColor,

    #[serde(rename = "upvote_ratio")]
    pub upvote_ratio: f64,

    #[serde(rename = "author_flair_background_color")]
    pub author_flair_background_color: Option<String>,

    #[serde(rename = "ups")]
    pub ups: i64,

    #[serde(rename = "total_awards_received")]
    pub total_awards_received: i64,

    #[serde(rename = "media_embed")]
    pub media_embed: MediaEmbed,

    #[serde(rename = "thumbnail_width")]
    pub thumbnail_width: Option<i64>,

    #[serde(rename = "author_flair_template_id")]
    pub author_flair_template_id: Option<String>,

    #[serde(rename = "is_original_content")]
    pub is_original_content: bool,

    #[serde(rename = "user_reports")]
    pub user_reports: Vec<Option<serde_json::Value>>,

    #[serde(rename = "secure_media")]
    pub secure_media: Option<Media>,

    #[serde(rename = "is_reddit_media_domain")]
    pub is_reddit_media_domain: bool,

    #[serde(rename = "is_meta")]
    pub is_meta: bool,

    #[serde(rename = "category")]
    pub category: Option<serde_json::Value>,

    #[serde(rename = "secure_media_embed")]
    pub secure_media_embed: MediaEmbed,

    #[serde(rename = "link_flair_text")]
    pub link_flair_text: Option<String>,

    #[serde(rename = "can_mod_post")]
    pub can_mod_post: bool,

    #[serde(rename = "score")]
    pub score: i64,

    #[serde(rename = "approved_by")]
    pub approved_by: Option<serde_json::Value>,

    #[serde(rename = "is_created_from_ads_ui")]
    pub is_created_from_ads_ui: bool,

    #[serde(rename = "author_premium")]
    pub author_premium: bool,

    #[serde(rename = "thumbnail")]
    pub thumbnail: String,

    #[serde(rename = "edited")]
    pub edited: Edited,

    #[serde(rename = "author_flair_css_class")]
    pub author_flair_css_class: Option<serde_json::Value>,

    #[serde(rename = "author_flair_richtext")]
    pub author_flair_richtext: Vec<FlairRichtext>,

    #[serde(rename = "gildings")]
    pub gildings: Gildings,

    #[serde(rename = "post_hint")]
    pub post_hint: Option<PostHint>,

    #[serde(rename = "content_categories")]
    pub content_categories: Option<serde_json::Value>,

    #[serde(rename = "is_self")]
    pub is_self: bool,

    #[serde(rename = "subreddit_type")]
    pub subreddit_type: SubredditType,

    #[serde(rename = "created")]
    pub created: f64,

    #[serde(rename = "link_flair_type")]
    pub link_flair_type: AuthorFlairType,

    #[serde(rename = "wls")]
    pub wls: Option<i64>,

    #[serde(rename = "removed_by_category")]
    pub removed_by_category: Option<serde_json::Value>,

    #[serde(rename = "banned_by")]
    pub banned_by: Option<serde_json::Value>,

    #[serde(rename = "author_flair_type")]
    pub author_flair_type: AuthorFlairType,

    #[serde(rename = "domain")]
    pub domain: String,

    #[serde(rename = "allow_live_comments")]
    pub allow_live_comments: bool,

    #[serde(rename = "selftext_html")]
    pub selftext_html: Option<String>,

    #[serde(rename = "likes")]
    pub likes: Option<serde_json::Value>,

    #[serde(rename = "suggested_sort")]
    pub suggested_sort: Option<SuggestedSort>,

    #[serde(rename = "banned_at_utc")]
    pub banned_at_utc: Option<serde_json::Value>,

    #[serde(rename = "url_overridden_by_dest")]
    pub url_overridden_by_dest: Option<String>,

    #[serde(rename = "view_count")]
    pub view_count: Option<serde_json::Value>,

    #[serde(rename = "archived")]
    pub archived: bool,

    #[serde(rename = "no_follow")]
    pub no_follow: bool,

    #[serde(rename = "is_crosspostable")]
    pub is_crosspostable: bool,

    #[serde(rename = "pinned")]
    pub pinned: bool,

    #[serde(rename = "over_18")]
    pub over_18: bool,

    #[serde(rename = "preview")]
    pub preview: Option<Preview>,

    #[serde(rename = "all_awardings")]
    pub all_awardings: Vec<AllAwarding>,

    #[serde(rename = "awarders")]
    pub awarders: Vec<Option<serde_json::Value>>,

    #[serde(rename = "media_only")]
    pub media_only: bool,

    #[serde(rename = "link_flair_template_id")]
    pub link_flair_template_id: Option<String>,

    #[serde(rename = "can_gild")]
    pub can_gild: bool,

    #[serde(rename = "spoiler")]
    pub spoiler: bool,

    #[serde(rename = "locked")]
    pub locked: bool,

    #[serde(rename = "author_flair_text")]
    pub author_flair_text: Option<String>,

    #[serde(rename = "treatment_tags")]
    pub treatment_tags: Vec<Option<serde_json::Value>>,

    #[serde(rename = "visited")]
    pub visited: bool,

    #[serde(rename = "removed_by")]
    pub removed_by: Option<serde_json::Value>,

    #[serde(rename = "mod_note")]
    pub mod_note: Option<serde_json::Value>,

    #[serde(rename = "distinguished")]
    pub distinguished: Option<Distinguished>,

    #[serde(rename = "subreddit_id")]
    pub subreddit_id: SubredditId,

    #[serde(rename = "author_is_blocked")]
    pub author_is_blocked: bool,

    #[serde(rename = "mod_reason_by")]
    pub mod_reason_by: Option<serde_json::Value>,

    #[serde(rename = "num_reports")]
    pub num_reports: Option<serde_json::Value>,

    #[serde(rename = "removal_reason")]
    pub removal_reason: Option<serde_json::Value>,

    #[serde(rename = "link_flair_background_color")]
    pub link_flair_background_color: LinkFlairBackgroundColor,

    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "is_robot_indexable")]
    pub is_robot_indexable: bool,

    #[serde(rename = "report_reasons")]
    pub report_reasons: Option<serde_json::Value>,

    #[serde(rename = "author")]
    pub author: String,

    #[serde(rename = "discussion_type")]
    pub discussion_type: Option<serde_json::Value>,

    #[serde(rename = "num_comments")]
    pub num_comments: i64,

    #[serde(rename = "send_replies")]
    pub send_replies: bool,

    #[serde(rename = "whitelist_status")]
    pub whitelist_status: Option<WhitelistStatus>,

    #[serde(rename = "contest_mode")]
    pub contest_mode: bool,

    #[serde(rename = "mod_reports")]
    pub mod_reports: Vec<Option<serde_json::Value>>,

    #[serde(rename = "author_patreon_flair")]
    pub author_patreon_flair: bool,

    #[serde(rename = "author_flair_text_color")]
    pub author_flair_text_color: Option<String>,

    #[serde(rename = "permalink")]
    pub permalink: String,

    #[serde(rename = "parent_whitelist_status")]
    pub parent_whitelist_status: Option<WhitelistStatus>,

    #[serde(rename = "stickied")]
    pub stickied: bool,

    #[serde(rename = "url")]
    pub url: String,

    #[serde(rename = "subreddit_subscribers")]
    pub subreddit_subscribers: i64,

    #[serde(rename = "created_utc")]
    pub created_utc: f64,

    #[serde(rename = "num_crossposts")]
    pub num_crossposts: i64,

    #[serde(rename = "media")]
    pub media: Option<Media>,

    #[serde(rename = "is_video")]
    pub is_video: bool,

    #[serde(rename = "media_metadata")]
    pub media_metadata: Option<HashMap<String, MediaMetadatum>>,

    #[serde(rename = "is_gallery")]
    pub is_gallery: Option<bool>,

    #[serde(rename = "gallery_data")]
    pub gallery_data: Option<GalleryData>,
}

#[derive(Serialize, Deserialize)]
pub struct AllAwarding {
    #[serde(rename = "giver_coin_reward")]
    pub giver_coin_reward: Option<i64>,

    #[serde(rename = "subreddit_id")]
    pub subreddit_id: Option<serde_json::Value>,

    #[serde(rename = "is_new")]
    pub is_new: bool,

    #[serde(rename = "days_of_drip_extension")]
    pub days_of_drip_extension: i64,

    #[serde(rename = "coin_price")]
    pub coin_price: i64,

    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "penny_donate")]
    pub penny_donate: Option<i64>,

    #[serde(rename = "award_sub_type")]
    pub award_sub_type: AwardSubType,

    #[serde(rename = "coin_reward")]
    pub coin_reward: i64,

    #[serde(rename = "icon_url")]
    pub icon_url: String,

    #[serde(rename = "days_of_premium")]
    pub days_of_premium: i64,

    #[serde(rename = "tiers_by_required_awardings")]
    pub tiers_by_required_awardings: Option<serde_json::Value>,

    #[serde(rename = "resized_icons")]
    pub resized_icons: Vec<ResizedIcon>,

    #[serde(rename = "icon_width")]
    pub icon_width: i64,

    #[serde(rename = "static_icon_width")]
    pub static_icon_width: i64,

    #[serde(rename = "start_date")]
    pub start_date: Option<serde_json::Value>,

    #[serde(rename = "is_enabled")]
    pub is_enabled: bool,

    #[serde(rename = "awardings_required_to_grant_benefits")]
    pub awardings_required_to_grant_benefits: Option<serde_json::Value>,

    #[serde(rename = "description")]
    pub description: String,

    #[serde(rename = "end_date")]
    pub end_date: Option<serde_json::Value>,

    #[serde(rename = "subreddit_coin_reward")]
    pub subreddit_coin_reward: i64,

    #[serde(rename = "count")]
    pub count: i64,

    #[serde(rename = "static_icon_height")]
    pub static_icon_height: i64,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "resized_static_icons")]
    pub resized_static_icons: Vec<ResizedIcon>,

    #[serde(rename = "icon_format")]
    pub icon_format: Option<String>,

    #[serde(rename = "icon_height")]
    pub icon_height: i64,

    #[serde(rename = "penny_price")]
    pub penny_price: Option<i64>,

    #[serde(rename = "award_type")]
    pub award_type: AwardType,

    #[serde(rename = "static_icon_url")]
    pub static_icon_url: String,
}

#[derive(Serialize, Deserialize)]
pub struct ResizedIcon {
    #[serde(rename = "url")]
    pub url: String,

    #[serde(rename = "width")]
    pub width: i64,

    #[serde(rename = "height")]
    pub height: i64,
}

#[derive(Serialize, Deserialize)]
pub struct FlairRichtext {
    #[serde(rename = "e")]
    pub e: AuthorFlairType,

    #[serde(rename = "t")]
    pub t: String,
}

#[derive(Serialize, Deserialize)]
pub struct GalleryData {
    #[serde(rename = "items")]
    pub items: Vec<Item>,
}

#[derive(Serialize, Deserialize)]
pub struct Item {
    #[serde(rename = "media_id")]
    pub media_id: String,

    #[serde(rename = "id")]
    pub id: i64,
}

#[derive(Serialize, Deserialize)]
pub struct Gildings {
    #[serde(rename = "gid_1")]
    pub gid_1: Option<i64>,
}

#[derive(Serialize, Deserialize)]
pub struct Media {
    #[serde(rename = "reddit_video")]
    pub reddit_video: Option<RedditVideo>,

    #[serde(rename = "type")]
    pub media_type: Option<MediaType>,

    #[serde(rename = "oembed")]
    pub oembed: Option<Oembed>,
}

#[derive(Serialize, Deserialize)]
pub struct Oembed {
    #[serde(rename = "provider_url")]
    pub provider_url: String,

    #[serde(rename = "version")]
    pub version: String,

    #[serde(rename = "title")]
    pub title: String,

    #[serde(rename = "type")]
    pub oembed_type: OembedType,

    #[serde(rename = "thumbnail_width")]
    pub thumbnail_width: i64,

    #[serde(rename = "height")]
    pub height: i64,

    #[serde(rename = "width")]
    pub width: i64,

    #[serde(rename = "html")]
    pub html: String,

    #[serde(rename = "author_name")]
    pub author_name: Option<String>,

    #[serde(rename = "provider_name")]
    pub provider_name: ProviderName,

    #[serde(rename = "thumbnail_url")]
    pub thumbnail_url: String,

    #[serde(rename = "thumbnail_height")]
    pub thumbnail_height: i64,

    #[serde(rename = "author_url")]
    pub author_url: Option<String>,

    #[serde(rename = "description")]
    pub description: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct RedditVideo {
    #[serde(rename = "bitrate_kbps")]
    pub bitrate_kbps: i64,

    #[serde(rename = "fallback_url")]
    pub fallback_url: String,

    #[serde(rename = "height")]
    pub height: i64,

    #[serde(rename = "width")]
    pub width: i64,

    #[serde(rename = "scrubber_media_url")]
    pub scrubber_media_url: String,

    #[serde(rename = "dash_url")]
    pub dash_url: String,

    #[serde(rename = "duration")]
    pub duration: i64,

    #[serde(rename = "hls_url")]
    pub hls_url: String,

    #[serde(rename = "is_gif")]
    pub is_gif: bool,

    #[serde(rename = "transcoding_status")]
    pub transcoding_status: String,
}

#[derive(Serialize, Deserialize)]
pub struct MediaEmbed {
    #[serde(rename = "content")]
    pub content: Option<String>,

    #[serde(rename = "width")]
    pub width: Option<i64>,

    #[serde(rename = "scrolling")]
    pub scrolling: Option<bool>,

    #[serde(rename = "height")]
    pub height: Option<i64>,

    #[serde(rename = "media_domain_url")]
    pub media_domain_url: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct MediaMetadatum {
    #[serde(rename = "status")]
    pub status: Status,

    #[serde(rename = "e")]
    pub e: E,

    #[serde(rename = "m")]
    pub m: M,

    #[serde(rename = "p")]
    pub p: Vec<S>,

    #[serde(rename = "s")]
    pub s: S,

    #[serde(rename = "id")]
    pub id: String,
}

#[derive(Serialize, Deserialize)]
pub struct S {
    #[serde(rename = "y")]
    pub y: i64,

    #[serde(rename = "x")]
    pub x: i64,

    #[serde(rename = "u")]
    pub u: String,
}

#[derive(Serialize, Deserialize)]
pub struct Preview {
    #[serde(rename = "images")]
    pub images: Vec<Image>,

    #[serde(rename = "enabled")]
    pub enabled: bool,
}

#[derive(Serialize, Deserialize)]
pub struct Image {
    #[serde(rename = "source")]
    pub source: ResizedIcon,

    #[serde(rename = "resolutions")]
    pub resolutions: Vec<ResizedIcon>,

    #[serde(rename = "variants")]
    pub variants: Variants,

    #[serde(rename = "id")]
    pub id: String,
}

#[derive(Serialize, Deserialize)]
pub struct Variants {
    #[serde(rename = "gif")]
    pub gif: Option<Gif>,

    #[serde(rename = "mp4")]
    pub mp4: Option<Gif>,
}

#[derive(Serialize, Deserialize)]
pub struct Gif {
    #[serde(rename = "source")]
    pub source: ResizedIcon,

    #[serde(rename = "resolutions")]
    pub resolutions: Vec<ResizedIcon>,
}

#[derive(Serialize, Deserialize)]
#[serde(untagged)]
pub enum Edited {
    Bool(bool),

    Double(f64),
}

#[derive(Serialize, Deserialize)]
pub enum AwardSubType {
    #[serde(rename = "GLOBAL")]
    Global,

    #[serde(rename = "PREMIUM")]
    Premium,
}

#[derive(Serialize, Deserialize)]
pub enum AwardType {
    #[serde(rename = "global")]
    Global,
}

#[derive(Serialize, Deserialize)]
pub enum AuthorFlairType {
    #[serde(rename = "richtext")]
    Richtext,

    #[serde(rename = "text")]
    Text,
}

#[derive(Serialize, Deserialize)]
pub enum Distinguished {
    #[serde(rename = "moderator")]
    Moderator,
}

#[derive(Serialize, Deserialize)]
pub enum LinkFlairBackgroundColor {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "#ff0000")]
    Ff0000,

    #[serde(rename = "#ffb000")]
    Ffb000,

    #[serde(rename = "#014980")]
    The014980,

    #[serde(rename = "#0392cf")]
    The0392Cf,

    #[serde(rename = "#349e48")]
    The349E48,

    #[serde(rename = "#365b8c")]
    The365B8C,

    #[serde(rename = "#7a5901")]
    The7A5901,

    #[serde(rename = "#800080")]
    The800080,
}

#[derive(Serialize, Deserialize)]
pub enum LinkFlairTextColor {
    #[serde(rename = "dark")]
    Dark,

    #[serde(rename = "light")]
    Light,
}

#[derive(Serialize, Deserialize)]
pub enum MediaType {
    #[serde(rename = "youtube.com")]
    YoutubeCom,
}

#[derive(Serialize, Deserialize)]
pub enum OembedType {
    #[serde(rename = "video")]
    Video,
}

#[derive(Serialize, Deserialize)]
pub enum ProviderName {
    #[serde(rename = "YouTube")]
    YouTube,
}

#[derive(Serialize, Deserialize)]
pub enum E {
    #[serde(rename = "Image")]
    Image,
}

#[derive(Serialize, Deserialize)]
pub enum M {
    #[serde(rename = "image/jpg")]
    ImageJpg,

    #[serde(rename = "image/png")]
    ImagePng,
}

#[derive(Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "valid")]
    Valid,
}

#[derive(Serialize, Deserialize)]
pub enum WhitelistStatus {
    #[serde(rename = "all_ads")]
    AllAds,

    #[serde(rename = "some_ads")]
    SomeAds,
}

#[derive(Serialize, Deserialize)]
pub enum PostHint {
    #[serde(rename = "hosted:video")]
    HostedVideo,

    #[serde(rename = "image")]
    Image,

    #[serde(rename = "link")]
    Link,

    #[serde(rename = "self")]
    PostHintSelf,
}

#[derive(Serialize, Deserialize)]
pub enum SubredditId {
    #[serde(rename = "t5_2fwo")]
    T52Fwo,

    #[serde(rename = "t5_2s7lj")]
    T52S7Lj,

    #[serde(rename = "t5_2th52")]
    T52Th52,

    #[serde(rename = "t5_4vqrv0")]
    T54Vqrv0,
}

#[derive(Serialize, Deserialize)]
pub enum SubredditType {
    #[serde(rename = "public")]
    Public,

    #[serde(rename = "restricted")]
    Restricted,
}

#[derive(Serialize, Deserialize)]
pub enum SuggestedSort {
    #[serde(rename = "confidence")]
    Confidence,
}

#[derive(Serialize, Deserialize)]
pub enum Kind {
    #[serde(rename = "t3")]
    T3,
}
